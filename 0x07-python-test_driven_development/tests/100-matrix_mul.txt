``matrix_mul(...)`` returns a new matrix representing the multiplication of
``m_a`` by ``m_b``.

::

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

"""

>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8])
[[19, 22], [43, 50]]

>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]

>>> matrix_mul([[1.2, 5.5, 6.2], [4.66, 12.3, -9.2]],
...            [[5.0, 3.3], [-2.9, 4.4], [7.2, 4.4]])
[[34.69, 55.44], [-78.61, 29.018]]

>>> matrix_mul([[1, 2.2, 3.3, 4], [5, 6, 7, 8.8]],
...            [[1.1, 2, 3.3], [4.0, 5.5, 6], [7, 8, 9], [10.01, 11, 12.3]])
[[73.04, 84.5, 95.4], [166.59, 195.8, 223.74]]

>>> matrix_mul()
Traceback (most recent call last):
    ...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> matrix_mul([], [[1, 2]])
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2]], [])
Traceback (most recent call last):
    ...
ValueError: m_b can't be empty

>>> matrix_mul("not a list", [[1, 2]])
Traceback (most recent call last):
    ...
TypeError: m_a must be a list

>>> matrix_mul([[1, 2]], "also not a list")
Traceback (most recent call last):
    ...
TypeError: m_b must be a list

>>> matrix_mul([[1, "non-number"]], [[3, 4]])
Traceback (most recent call last):
    ...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[1, 2]], [[{"a": 1}, 8.8]])
Traceback (most recent call last):
    ...
TypeError: m_b should contain only integers or floats

>>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
Traceback (most recent call last):
    ...
TypeError: each row of m_b must be of the same size

>>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4, 5]])
Traceback (most recent call last):
    ...
TypeError: each row of m_a must be of the same size
"""

